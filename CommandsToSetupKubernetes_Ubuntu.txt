##1 -------- Installing Kubernetes on all Master and Worker machines as root user (sudo su - )--------------------------------------
apt-get update && apt-get install -y apt-transport-https curl

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

apt-get update
apt-get install -y docker.io
apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl

##2 ------------------Restart the kubelet--------------------------------------------------------------------------------------
systemctl enable docker.service
systemctl daemon-reload
systemctl restart kubelet


##3 ------------Intialize Kubernetes Master------------------------------------------------------------------------------------------------------------
kubeadm init   -- (On running this command it will be give an output as given below, this command has to be run on worker nodes to join this master)

kubeadm join 10.3.3.4:6443 --token nj4n4c.du4yq7m2ol6c3fy9 \
    --discovery-token-ca-cert-hash sha256:166e298cc4a910f3cdca1f9095921e0a8ad899466051b595d983188481823b3c

##4--------Join the Worker Node to the Master---------------------------------------------------------------------------------------------
Run the below command on all worker nodes to join the master. We get the below command when we run the "kubeadm init" on the master node.
The command below will differ on your case. So use the output that you get by running the kubeadm command above.

kubeadm join 10.3.3.4:6443 --token nj4n4c.du4yq7m2ol6c3fy9 \
    --discovery-token-ca-cert-hash sha256:166e298cc4a910f3cdca1f9095921e0a8ad899466051b595d983188481823b3c

#5----- Run the below commands in Master as non root user (type exit to log out as root user) and allow ports-------------------------------------------------------

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Allow ports on Master and Worker nodes if VMs are created on cloud:
Master ports / port range:
6443, 2379-2380, 10250, 10251, 10252
Worker nodes / port range:
10250, 30000-32767

#6----- Check all the nodes are visible -----------------------------------------------------------------------------

Now run the command on your master to see the nodes connected : > kubectl get nodes 

As of now all nodes will be in "NotReady" state, because no network is configured. To see details why the nodes are in NotReady state,
type the below commands:

> kubectl describe node <node name>

You will see the below error : "KubeletNotReady   runtime network not ready: NetworkReady=false reason:NetworkPluginNotReady message:docker: network plugin is not ready: cni config uninitialized"

#7---- Set up the container network-------------------------------------------------------------------------------------------------------------------------

Multiple container network provider libs can be used to set up the network. We will use "Weave net".
Run the below command to set up the network on the Master Node.

Command:
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

Now type, > kubectl get nodes, this will show all nodes in ready state.

------------------------------------------------------------------------------------------------------------------------------------------
Installing Nginx-Ingress Controller:

https://kubernetes.github.io/ingress-nginx/deploy/

For Mac (Docker Desktop):
1) Create Ingress Controller
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml

2) Create a load balancer service to service Ingress Controller
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud-generic.yaml
-------------------------------------------------------------------------------------------------------------------------------------------
#8 -- Enable kubernetes Visualization

The Dashboard UI is not deployed by default. To deploy it, run the following command:
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta6/aio/deploy/recommended.yaml

You can access Dashboard using the kubectl command-line tool by running the following command:
kubectl proxy

Kubectl will make Dashboard available at http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/.

run the below commands to create user,authentication token and access the dashboard:
kubectl create -f userdashboard-config1.yaml
kubectl create -f userdashboard-config2.yaml

Now we need to find token we can use to log in. Execute following command:
kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')
Copy paste the token you recieve in the dashboard login screen

Ex:
Token: eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLThyNXE1Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIxZDBlODE2Mi0wZDE0LTExZWEtYjQzOC0wMjUwMDAwMDAwMDEiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.bwk3qPKHjXi0YkhahzBSqScP-Znurq-2eQEzCx_btM-DLULntZSErixdvkNdV6R8RJqzI-poptu0lgqRTKy-Mf10HEWizZR5G_hWKZqGbOuo65JathpbSEiPBggWd1VKhDKoNdjF_Cip-igpQ0zgSeqtWDLWHOuswRYtyIHFL1vx80APgHm0lPjMv1N9d0KTkh9efYaqN5dpxU4tch3y_qtmI2VMYF-ORrHdztzh_8E_XS2W3UFAPPOwxqbRwzSomho5wDO8hFtkVLUS0EG4QbFBduuOrpnqiHQv-EeAsm9qo1r_xpS4ep7mxlAT4qA_7tWtLl4zoBaT_yNpCCzgpA

Refer for more details: https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md
----------------------------------------------------------------------------------------------------------------------------------------------------

Visualization of the flow of components:

1) Using Weave Scope:
Ensure your computer is behind a firewall that blocks port 4040 then,

sudo curl -L git.io/scope -o /usr/local/bin/scope
sudo chmod a+x /usr/local/bin/scope
scope launch
This script downloads and runs a recent Scope image from Docker Hub. Now, open your web browser to http://localhost:4040.

---------------------------------------------------------------------------------------------------------------